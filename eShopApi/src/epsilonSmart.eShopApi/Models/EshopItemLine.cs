/* 
 * EpsilonSmart Eshop API
 *
 * This is the EspilonSmart API descriptor. The particular definition of the API provides API endpoints related to e-shop operations. </br>  All the following actions require Authorization token. Http request should contain a header having key: 'Authorization' and value: 'Bearer {Jwt Token value}'.   If the request lacks Authorization header or the token is invalid, each action responds with status 401 Unauthorized.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = epsilonSmart.eShopApi.Client.SwaggerDateConverter;

namespace epsilonSmart.eShopApi.Models
{
    /// <summary>
    /// EshopItemLine
    /// </summary>
    [DataContract]
        public partial class EshopItemLine :  IEquatable<EshopItemLine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EshopItemLine" /> class.
        /// </summary>
        /// <param name="itemID">itemID.</param>
        /// <param name="itemCode">itemCode.</param>
        /// <param name="scanCode">scanCode.</param>
        /// <param name="itemPrintDescr">itemPrintDescr.</param>
        /// <param name="vATPercent">vATPercent.</param>
        /// <param name="qty">qty.</param>
        /// <param name="price">price.</param>
        /// <param name="isGift">isGift.</param>
        /// <param name="lineDiscount">lineDiscount.</param>
        /// <param name="netVal">netVal.</param>
        /// <param name="vATVal">vATVal.</param>
        /// <param name="totalVal">totalVal.</param>
        /// <param name="justification">justification.</param>
        public EshopItemLine(string itemID = default(string), string itemCode = default(string), string scanCode = default(string), string itemPrintDescr = default(string), double? vATPercent = default(double?), double? qty = default(double?), double? price = default(double?), int? isGift = default(int?), double? lineDiscount = default(double?), double? netVal = default(double?), double? vATVal = default(double?), double? totalVal = default(double?), string justification = default(string))
        {
            this.ItemID = itemID;
            this.ItemCode = itemCode;
            this.ScanCode = scanCode;
            this.ItemPrintDescr = itemPrintDescr;
            this.VATPercent = vATPercent;
            this.Qty = qty;
            this.Price = price;
            this.IsGift = isGift;
            this.LineDiscount = lineDiscount;
            this.NetVal = netVal;
            this.VATVal = vATVal;
            this.TotalVal = totalVal;
            this.Justification = justification;
        }
        
        /// <summary>
        /// Gets or Sets ItemID
        /// </summary>
        [DataMember(Name="ItemID", EmitDefaultValue=false)]
        public string ItemID { get; set; }

        /// <summary>
        /// Gets or Sets ItemCode
        /// </summary>
        [DataMember(Name="ItemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }

        /// <summary>
        /// Gets or Sets ScanCode
        /// </summary>
        [DataMember(Name="ScanCode", EmitDefaultValue=false)]
        public string ScanCode { get; set; }

        /// <summary>
        /// Gets or Sets ItemPrintDescr
        /// </summary>
        [DataMember(Name="ItemPrintDescr", EmitDefaultValue=false)]
        public string ItemPrintDescr { get; set; }

        /// <summary>
        /// Gets or Sets VATPercent
        /// </summary>
        [DataMember(Name="VATPercent", EmitDefaultValue=false)]
        public double? VATPercent { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public double? Qty { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets IsGift
        /// </summary>
        [DataMember(Name="IsGift", EmitDefaultValue=false)]
        public int? IsGift { get; set; }

        /// <summary>
        /// Gets or Sets LineDiscount
        /// </summary>
        [DataMember(Name="LineDiscount", EmitDefaultValue=false)]
        public double? LineDiscount { get; set; }

        /// <summary>
        /// Gets or Sets NetVal
        /// </summary>
        [DataMember(Name="NetVal", EmitDefaultValue=false)]
        public double? NetVal { get; set; }

        /// <summary>
        /// Gets or Sets VATVal
        /// </summary>
        [DataMember(Name="VATVal", EmitDefaultValue=false)]
        public double? VATVal { get; set; }

        /// <summary>
        /// Gets or Sets TotalVal
        /// </summary>
        [DataMember(Name="TotalVal", EmitDefaultValue=false)]
        public double? TotalVal { get; set; }

        /// <summary>
        /// Gets or Sets Justification
        /// </summary>
        [DataMember(Name="Justification", EmitDefaultValue=false)]
        public string Justification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EshopItemLine {\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  ScanCode: ").Append(ScanCode).Append("\n");
            sb.Append("  ItemPrintDescr: ").Append(ItemPrintDescr).Append("\n");
            sb.Append("  VATPercent: ").Append(VATPercent).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  IsGift: ").Append(IsGift).Append("\n");
            sb.Append("  LineDiscount: ").Append(LineDiscount).Append("\n");
            sb.Append("  NetVal: ").Append(NetVal).Append("\n");
            sb.Append("  VATVal: ").Append(VATVal).Append("\n");
            sb.Append("  TotalVal: ").Append(TotalVal).Append("\n");
            sb.Append("  Justification: ").Append(Justification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EshopItemLine);
        }

        /// <summary>
        /// Returns true if EshopItemLine instances are equal
        /// </summary>
        /// <param name="input">Instance of EshopItemLine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EshopItemLine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemID == input.ItemID ||
                    (this.ItemID != null &&
                    this.ItemID.Equals(input.ItemID))
                ) && 
                (
                    this.ItemCode == input.ItemCode ||
                    (this.ItemCode != null &&
                    this.ItemCode.Equals(input.ItemCode))
                ) && 
                (
                    this.ScanCode == input.ScanCode ||
                    (this.ScanCode != null &&
                    this.ScanCode.Equals(input.ScanCode))
                ) && 
                (
                    this.ItemPrintDescr == input.ItemPrintDescr ||
                    (this.ItemPrintDescr != null &&
                    this.ItemPrintDescr.Equals(input.ItemPrintDescr))
                ) && 
                (
                    this.VATPercent == input.VATPercent ||
                    (this.VATPercent != null &&
                    this.VATPercent.Equals(input.VATPercent))
                ) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.IsGift == input.IsGift ||
                    (this.IsGift != null &&
                    this.IsGift.Equals(input.IsGift))
                ) && 
                (
                    this.LineDiscount == input.LineDiscount ||
                    (this.LineDiscount != null &&
                    this.LineDiscount.Equals(input.LineDiscount))
                ) && 
                (
                    this.NetVal == input.NetVal ||
                    (this.NetVal != null &&
                    this.NetVal.Equals(input.NetVal))
                ) && 
                (
                    this.VATVal == input.VATVal ||
                    (this.VATVal != null &&
                    this.VATVal.Equals(input.VATVal))
                ) && 
                (
                    this.TotalVal == input.TotalVal ||
                    (this.TotalVal != null &&
                    this.TotalVal.Equals(input.TotalVal))
                ) && 
                (
                    this.Justification == input.Justification ||
                    (this.Justification != null &&
                    this.Justification.Equals(input.Justification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemID != null)
                    hashCode = hashCode * 59 + this.ItemID.GetHashCode();
                if (this.ItemCode != null)
                    hashCode = hashCode * 59 + this.ItemCode.GetHashCode();
                if (this.ScanCode != null)
                    hashCode = hashCode * 59 + this.ScanCode.GetHashCode();
                if (this.ItemPrintDescr != null)
                    hashCode = hashCode * 59 + this.ItemPrintDescr.GetHashCode();
                if (this.VATPercent != null)
                    hashCode = hashCode * 59 + this.VATPercent.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.IsGift != null)
                    hashCode = hashCode * 59 + this.IsGift.GetHashCode();
                if (this.LineDiscount != null)
                    hashCode = hashCode * 59 + this.LineDiscount.GetHashCode();
                if (this.NetVal != null)
                    hashCode = hashCode * 59 + this.NetVal.GetHashCode();
                if (this.VATVal != null)
                    hashCode = hashCode * 59 + this.VATVal.GetHashCode();
                if (this.TotalVal != null)
                    hashCode = hashCode * 59 + this.TotalVal.GetHashCode();
                if (this.Justification != null)
                    hashCode = hashCode * 59 + this.Justification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
